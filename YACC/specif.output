Terminals unused in grammar

   CNST
   known
   as
   shall
   be
   complex


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: statement '.'
    3              | statement '.' sequentialStatement

    4 sequentialStatement: statement
    5                    | statement ';' sequentialStatement

    6 statement: declarationStatement

    7 declarationStatement: simpleDeclaration

    8 simpleDeclaration: thus SYM is type

    9 type: numeric
   10     | text


Terminals, with rules where they appear

$end (0) 0
'.' (46) 2 3
';' (59) 5
error (256)
CNST (258)
SYM (259) 8
thus (260) 8
is (261) 8
known (262)
as (263)
shall (264)
be (265)
numeric (266) 9
text (267) 10
complex (268)


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
program (17)
    on left: 1, on right: 0
statementList (18)
    on left: 2 3, on right: 1
sequentialStatement (19)
    on left: 4 5, on right: 3 5
statement (20)
    on left: 6, on right: 2 3 4 5
declarationStatement (21)
    on left: 7, on right: 6
simpleDeclaration (22)
    on left: 8, on right: 7
type (23)
    on left: 9 10, on right: 8


State 0

    0 $accept: . program $end

    thus  shift, and go to state 1

    program               go to state 2
    statementList         go to state 3
    statement             go to state 4
    declarationStatement  go to state 5
    simpleDeclaration     go to state 6


State 1

    8 simpleDeclaration: thus . SYM is type

    SYM  shift, and go to state 7


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: statementList .

    $default  reduce using rule 1 (program)


State 4

    2 statementList: statement . '.'
    3              | statement . '.' sequentialStatement

    '.'  shift, and go to state 9


State 5

    6 statement: declarationStatement .

    $default  reduce using rule 6 (statement)


State 6

    7 declarationStatement: simpleDeclaration .

    $default  reduce using rule 7 (declarationStatement)


State 7

    8 simpleDeclaration: thus SYM . is type

    is  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 statementList: statement '.' .
    3              | statement '.' . sequentialStatement

    thus  shift, and go to state 1

    $default  reduce using rule 2 (statementList)

    sequentialStatement   go to state 11
    statement             go to state 12
    declarationStatement  go to state 5
    simpleDeclaration     go to state 6


State 10

    8 simpleDeclaration: thus SYM is . type

    numeric  shift, and go to state 13
    text     shift, and go to state 14

    type  go to state 15


State 11

    3 statementList: statement '.' sequentialStatement .

    $default  reduce using rule 3 (statementList)


State 12

    4 sequentialStatement: statement .
    5                    | statement . ';' sequentialStatement

    ';'  shift, and go to state 16

    $default  reduce using rule 4 (sequentialStatement)


State 13

    9 type: numeric .

    $default  reduce using rule 9 (type)


State 14

   10 type: text .

    $default  reduce using rule 10 (type)


State 15

    8 simpleDeclaration: thus SYM is type .

    $default  reduce using rule 8 (simpleDeclaration)


State 16

    5 sequentialStatement: statement ';' . sequentialStatement

    thus  shift, and go to state 1

    sequentialStatement   go to state 17
    statement             go to state 12
    declarationStatement  go to state 5
    simpleDeclaration     go to state 6


State 17

    5 sequentialStatement: statement ';' sequentialStatement .

    $default  reduce using rule 5 (sequentialStatement)
