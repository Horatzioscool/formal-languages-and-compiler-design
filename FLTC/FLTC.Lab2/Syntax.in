[START]program ::= statementList|NIL
statementList ::= statement & "."|statement & "." & sequentialStatement
sequentialStatement ::= statement|statement & ";" & sequentialStatement
statement ::= declarationStatement|conditionalStatement|loopStatement|expressionStatement
declarationStatement ::= simpleDeclaration|simpleDeclaration & "," & "known" & "as" & ":" & constValue
simpleDeclaration ::= "thus" & [SYM] & "is"& type
type ::= "numeric"|"text"
constValue ::= [CNST]
conditionalStatement ::= singleBranchConditionalStatement|multiBranchConditionalStatement
condition ::= "when" & booleanExpression
singleBranchConditionalStatement ::= condition & "," & "then" & sequentialStatement & ";"|condition & "," & "then" & sequentialStatement & "."
multiBranchConditionalStatement ::= condition & "," & "then" & sequentialStatement & "," & "when" & "not" & sequentialStatement & ";"|condition & "," & "then" & sequentialStatement & "," & "when" & "not" & sequentialStatement & "."
loopStatement ::= whileLoopStatement
whileLoopStatement ::= "while" & booleanExpression & "," & sequentialStatement & ";"|"while" & booleanExpression & "," & sequentialStatement & "."
expressionStatement ::= expression
expression ::= assignmentExpression | arithmeticExpression | readExpression | writeExpression | booleanExpression | constValue
assignmentExpression ::= identifier & "shall" & "be" & expression
arithmeticExpression ::= term | term & arithmeticOperation & term
term ::= [CNST]|[SYM]|arithmeticExpression 
arithmeticOperation ::= "added" & "with"|"subtracted" & "by"|"multiply" & "with"|"divide" & "by"
readExpression ::= "read"
writeExpression ::= expression & "shall" & "be" & "written";
booleanExpression ::= "true"|"false"|expression & relation & expression
relation ::= "equals"|"greater" & "than"|"lesser" & "than"|"different" & "to"